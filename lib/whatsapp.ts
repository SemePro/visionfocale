/**
 * Service WhatsApp pour envoi de messages et notifications
 */

interface WhatsAppMessageOptions {
  to: string;
  message: string;
  type?: 'text' | 'template';
}

interface WhatsAppResponse {
  success: boolean;
  messageId?: string;
  error?: string;
}

/**
 * Envoyer un message WhatsApp via l'API Business
 */
export async function sendWhatsAppMessage(
  options: WhatsAppMessageOptions
): Promise<WhatsAppResponse> {
  const { to, message, type = 'text' } = options;
  const businessNumber = process.env.WHATSAPP_BUSINESS_NUMBER;
  const apiToken = process.env.WHATSAPP_API_TOKEN;

  if (!businessNumber || !apiToken) {
    console.error('‚ùå Configuration WhatsApp manquante');
    // En dev, on simule l'envoi
    if (process.env.NODE_ENV === 'development') {
      return sendWhatsAppDev(to, message);
    }
    return { success: false, error: 'Configuration WhatsApp manquante' };
  }

  try {
    // TODO: Impl√©menter l'API WhatsApp Business r√©elle
    // Exemple avec l'API WhatsApp Business Cloud
    const response = await fetch(
      `https://graph.facebook.com/v17.0/${businessNumber}/messages`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${apiToken}`,
        },
        body: JSON.stringify({
          messaging_product: 'whatsapp',
          to,
          type,
          text: { body: message },
        }),
      }
    );

    const data = await response.json();

    if (response.ok && data.messages?.[0]?.id) {
      return {
        success: true,
        messageId: data.messages[0].id,
      };
    } else {
      return {
        success: false,
        error: data.error?.message || '√âchec envoi WhatsApp',
      };
    }
  } catch (error) {
    console.error('‚ùå Erreur envoi WhatsApp:', error);
    return { success: false, error: 'Erreur r√©seau' };
  }
}

/**
 * G√©n√©rer un lien WhatsApp (ouvre WhatsApp avec message pr√©-rempli)
 */
export function generateWhatsAppLink(phoneNumber: string, message: string): string {
  const businessNumber = process.env.WHATSAPP_BUSINESS_NUMBER || '+228XXXXXXXX';
  // Nettoyer le num√©ro (retirer espaces et caract√®res sp√©ciaux)
  const cleanNumber = businessNumber.replace(/[^0-9+]/g, '');
  const encodedMessage = encodeURIComponent(message);
  return `https://wa.me/${cleanNumber}?text=${encodedMessage}`;
}

/**
 * Envoyer une notification de galerie pr√™te via WhatsApp
 */
export async function sendGalleryReadyWhatsApp(
  phoneNumber: string,
  clientName: string,
  galleryLink: string,
  photoCount: number
): Promise<WhatsAppResponse> {
  const message = `Bonjour ${clientName}! üì∏

Vos ${photoCount} photos sont maintenant disponibles dans votre galerie priv√©e VisionFocale.

Acc√©dez √† vos photos ici:
${galleryLink}

Vous pouvez les consulter, aimer vos pr√©f√©r√©es et les t√©l√©charger.

Merci de votre confiance!
L'√©quipe VisionFocale ‚ú®`;

  return sendWhatsAppMessage({ to: phoneNumber, message });
}

/**
 * Envoyer une confirmation de r√©servation via WhatsApp
 */
export async function sendBookingConfirmationWhatsApp(
  phoneNumber: string,
  clientName: string,
  bookingDetails: {
    serviceType: string;
    date: string;
    time: string;
    location?: string;
  }
): Promise<WhatsAppResponse> {
  const { serviceType, date, time, location } = bookingDetails;
  
  let message = `Bonjour ${clientName}! ‚úÖ

Votre r√©servation VisionFocale est confirm√©e:

üì∑ Service: ${serviceType}
üìÖ Date: ${date}
üïê Heure: ${time}`;

  if (location) {
    message += `\nüìç Lieu: ${location}`;
  }

  message += `

Nous avons h√¢te de capturer vos moments pr√©cieux!

Pour toute question, r√©pondez √† ce message.

√Ä bient√¥t,
VisionFocale üé¨`;

  return sendWhatsAppMessage({ to: phoneNumber, message });
}

/**
 * Envoyer un rappel de rendez-vous via WhatsApp
 */
export async function sendBookingReminderWhatsApp(
  phoneNumber: string,
  clientName: string,
  bookingDetails: {
    serviceType: string;
    date: string;
    time: string;
  }
): Promise<WhatsAppResponse> {
  const { serviceType, date, time } = bookingDetails;
  
  const message = `Bonjour ${clientName}! üìÖ

Petit rappel: votre s√©ance ${serviceType} est pr√©vue demain.

üïê ${date} √† ${time}

Nous vous attendons avec impatience!

VisionFocale`;

  return sendWhatsAppMessage({ to: phoneNumber, message });
}

/**
 * G√©n√©rer un message de demande de renseignements
 */
export function generateInquiryMessage(): string {
  return 'Bonjour VisionFocale! J\'aimerais avoir plus d\'informations sur vos services.';
}

/**
 * G√©n√©rer un message de demande de r√©servation
 */
export function generateBookingMessage(serviceType: string, date?: string): string {
  let message = `Bonjour VisionFocale! Je souhaite r√©server une s√©ance ${serviceType}`;
  if (date) {
    message += ` pour le ${date}`;
  }
  message += '.';
  return message;
}

/**
 * Envoyer un code OTP via WhatsApp
 */
export async function sendOTPWhatsApp(phoneNumber: string, otp: string): Promise<WhatsAppResponse> {
  const message = `üîê *VisionFocale - Code de V√©rification*

Votre code OTP est: *${otp}*

‚è±Ô∏è Valable 10 minutes.

Ne partagez ce code avec personne.

VisionFocale üì∏`;

  return sendWhatsAppMessage({ to: phoneNumber, message });
}

/**
 * G√©n√©rer un code OTP √† 6 chiffres
 */
export function generateOTP(): string {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

/**
 * Simuler l'envoi WhatsApp en mode d√©veloppement
 */
export async function sendWhatsAppDev(to: string, message: string): Promise<WhatsAppResponse> {
  console.log('üí¨ [DEV MODE] WhatsApp simul√©:');
  console.log(`   √Ä: ${to}`);
  console.log(`   Message: ${message}`);
  return { success: true, messageId: 'wa-dev-' + Date.now() };
}

